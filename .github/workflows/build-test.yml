name: Build and Test

on:
  workflow_call:
    inputs:
      build_type:
        description: 'Type of build (Release or Debug)'
        required: false
        default: 'Release'
        type: string
      update_version:
        description: 'Whether to update version in CMakeLists.txt'
        required: false
        default: false
        type: boolean
      version:
        description: 'New version to set in CMakeLists.txt'
        required: false
        default: ''
        type: string
    outputs:
      artifact_name:
        description: "Name of the uploaded artifact"
        value: ${{ jobs.build.outputs.artifact_name }}

jobs:
  build:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    outputs:
      artifact_name: ${{ steps.set-artifact-name.outputs.name }}
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libportaudio2 libportaudio-dev libzmq3-dev cmake build-essential
    
    - name: Install Dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install portaudio zeromq cppzmq cmake
    
    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build
      
    - name: Update Version in CMakeLists.txt
      if: inputs.update_version
      run: |
        sed -i.bak "s/project(tessa_audio VERSION [0-9]*\.[0-9]*\.[0-9]*)/project(tessa_audio VERSION ${{ inputs.version }})/g" CMakeLists.txt
        cat CMakeLists.txt
    
    - name: Configure CMake
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -DBUILD_TESTING=ON
    
    - name: Build
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --config ${{ inputs.build_type }}
    
    - name: Run Tests
      working-directory: ${{github.workspace}}/build
      # Tests that require audio devices might fail in CI, so we allow them to fail
      continue-on-error: true
      run: ctest -C ${{ inputs.build_type }} --output-on-failure
      
    - name: Verify Executable
      working-directory: ${{github.workspace}}/build
      run: |
        ./tessa_audio --help
        ./tessa_audio --list-devices || true  # Allow this to fail on CI runners
    
    - name: Set Artifact Name
      id: set-artifact-name
      run: |
        if [ "${{ inputs.update_version }}" = "true" ]; then
          echo "name=tessa-audio-${{ matrix.os }}-v${{ inputs.version }}" >> $GITHUB_OUTPUT
        else
          PR_NUMBER="${{ github.event.pull_request.number }}"
          if [ -n "$PR_NUMBER" ]; then
            echo "name=tessa-audio-${{ matrix.os }}-pr-$PR_NUMBER" >> $GITHUB_OUTPUT
          else
            echo "name=tessa-audio-${{ matrix.os }}" >> $GITHUB_OUTPUT
          fi
        fi
      
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.set-artifact-name.outputs.name }}
        path: |
          ${{github.workspace}}/build/tessa_audio
          ${{github.workspace}}/build/lib*tessa_audio* 
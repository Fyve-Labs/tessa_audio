name: Build and Test

on:
  workflow_call:
    inputs:
      build_type:
        description: 'Type of build (Release or Debug)'
        required: false
        default: 'Release'
        type: string
      update_version:
        description: 'Whether to update version in CMakeLists.txt'
        required: false
        default: false
        type: boolean
      version:
        description: 'New version to set in CMakeLists.txt'
        required: false
        default: ''
        type: string
      with_coverage:
        description: 'Whether to generate code coverage reports'
        required: false
        default: false
        type: boolean
    outputs:
      artifact_name:
        description: "Name of the uploaded artifact"
        value: ${{ jobs.build.outputs.artifact_name }}

jobs:
  build:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    outputs:
      artifact_name: ${{ steps.set-artifact-name.outputs.name }}
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Coverage Tools (Linux)
      if: ${{ inputs.with_coverage && matrix.os == 'ubuntu-latest' }}
      run: |
        sudo apt-get update
        sudo apt-get install -y lcov
    
    - name: Install Coverage Tools (macOS)
      if: ${{ inputs.with_coverage && matrix.os == 'macos-latest' }}
      run: |
        brew install lcov
    
    - name: Build and Test
      run: |
        chmod +x scripts/build.sh
        if [ "${{ inputs.update_version }}" = "true" ]; then
          scripts/build.sh --build-type ${{ inputs.build_type }} --update-version ${{ inputs.version }} --update-version-h ${{ inputs.version }}
          if [ "${{ inputs.with_coverage }}" = "true" ]; then
            scripts/test.sh --build-type ${{ inputs.build_type }} --coverage
          else
            scripts/test.sh --build-type ${{ inputs.build_type }}
          fi
        else
          scripts/build.sh --build-type ${{ inputs.build_type }}
          if [ "${{ inputs.with_coverage }}" = "true" ]; then
            scripts/test.sh --build-type ${{ inputs.build_type }} --coverage
          else
            scripts/test.sh --build-type ${{ inputs.build_type }}
          fi
        fi
    
    - name: Set Artifact Name
      id: set-artifact-name
      run: |
        if [ "${{ inputs.update_version }}" = "true" ]; then
          echo "name=tessa-audio-${{ matrix.os }}-v${{ inputs.version }}" >> $GITHUB_OUTPUT
        else
          PR_NUMBER="${{ github.event.pull_request.number }}"
          if [ -n "$PR_NUMBER" ]; then
            echo "name=tessa-audio-${{ matrix.os }}-pr-$PR_NUMBER" >> $GITHUB_OUTPUT
          else
            echo "name=tessa-audio-${{ matrix.os }}" >> $GITHUB_OUTPUT
          fi
        fi
      
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.set-artifact-name.outputs.name }}
        path: |
          build/tessa_audio
          build/lib*tessa_audio*
    
    - name: Upload Coverage Reports
      if: ${{ inputs.with_coverage }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.set-artifact-name.outputs.name }}-coverage
        path: |
          build/coverage/
    
    - name: Display Coverage Summary
      if: ${{ inputs.with_coverage }}
      run: |
        if [ -f "build/coverage/coverage_summary.md" ]; then
          echo "::group::Code Coverage Summary"
          cat build/coverage/coverage_summary.md
          echo "::endgroup::"
        elif [ -f "build/coverage/basic_coverage_summary.md" ]; then
          echo "::group::Basic Code Coverage Summary"
          cat build/coverage/basic_coverage_summary.md
          echo "::endgroup::"
        else
          echo "No coverage summary found"
        fi 
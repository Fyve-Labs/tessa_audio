name: Build with Docker

on:
  workflow_call:
    inputs:
      build_type:
        description: 'Type of build (Release or Debug)'
        required: false
        default: 'Release'
        type: string
      update_version:
        description: 'Whether to update version in CMakeLists.txt'
        required: false
        default: false
        type: boolean
      version:
        description: 'New version to set in CMakeLists.txt'
        required: false
        default: ''
        type: string
      with_coverage:
        description: 'Whether to generate code coverage reports'
        required: false
        default: false
        type: boolean
    outputs:
      artifact_name:
        description: "Name of the uploaded artifact"
        value: ${{ jobs.build.outputs.artifact_name }}

jobs:
  build:
    name: Build with Docker
    # runs-on: ubuntu-latest
    # strategy:
    #   fail-fast: false
    #   matrix:
    #     include:
    #       - platform: linux/amd64
    #         arch: amd64
    #       - platform: linux/arm/v7
    #         arch: armv7
    #       - platform: macos-latest
    #         arch: arm64
    runs-on: ${{ matrix.runner || matrix.builder }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - builder: ubuntu-latest
            runner: ubuntu-latest
            platform: linux/amd64
            arch: amd64
          # - builder: macos-latest
          #   runner: macos-latest
          #   arch: x86_64
          - builder: debian-slim-armv7
            runner: debian-slim-armv7
            platform: linux/arm/v7
            arch: armv7
    outputs:
      artifact_name: ${{ steps.set-artifact-name.outputs.name }}
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Prepare build args
      id: build-args
      run: |
        # Set up build args
        BUILD_ARGS="--build-type ${{ inputs.build_type }}"
        
        # Add version args if requested
        if [ "${{ inputs.update_version }}" = "true" ]; then
          BUILD_ARGS="$BUILD_ARGS --update-version ${{ inputs.version }} --update-version-h ${{ inputs.version }}"
        fi
        
        echo "build_args=$BUILD_ARGS" >> $GITHUB_OUTPUT
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        platforms: ${{ matrix.platform }}
        push: false
        load: true
        tags: tessa-audio-builder:latest
        build-args: |
          BUILD_TYPE=${{ inputs.build_type }}
    
    - name: Extract binary from Docker image
      run: |
        # Create a container from the image
        CONTAINER_ID=$(docker create tessa-audio-builder:latest)
        
        # Create output directory
        mkdir -p build/
        
        # Copy the binary from the container
        docker cp $CONTAINER_ID:/app/build/tessa_audio build/
        
        # Copy any library files
        docker cp $CONTAINER_ID:/app/build/lib build/ || true
        
        # Remove the container
        docker rm $CONTAINER_ID
    
    - name: Set Artifact Name
      id: set-artifact-name
      run: |
        if [ "${{ inputs.update_version }}" = "true" ]; then
          echo "name=tessa-audio-${{ matrix.arch }}-v${{ inputs.version }}" >> $GITHUB_OUTPUT
        else
          PR_NUMBER="${{ github.event.pull_request.number }}"
          if [ -n "$PR_NUMBER" ]; then
            echo "name=tessa-audio-${{ matrix.arch }}-pr-$PR_NUMBER" >> $GITHUB_OUTPUT
          else
            echo "name=tessa-audio-${{ matrix.arch }}" >> $GITHUB_OUTPUT
          fi
        fi
      
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.set-artifact-name.outputs.name }}
        path: |
          build/tessa_audio
          build/lib*tessa_audio* 